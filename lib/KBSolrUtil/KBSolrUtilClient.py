# -*- coding: utf-8 -*-
############################################################
#
# Autogenerated by the KBase type compiler -
# any changes made here will be overwritten
#
############################################################

from __future__ import print_function
# the following is a hack to get the baseclient to import whether we're in a
# package or not. This makes pep8 unhappy hence the annotations.
try:
    # baseclient and this client are in a package
    from .baseclient import BaseClient as _BaseClient  # @UnusedImport
except:
    # no they aren't
    from baseclient import BaseClient as _BaseClient  # @Reimport


class KBSolrUtil(object):

    def __init__(
            self, url=None, timeout=30 * 60, user_id=None,
            password=None, token=None, ignore_authrc=False,
            trust_all_ssl_certificates=False,
            auth_svc='https://kbase.us/services/authorization/Sessions/Login'):
        if url is None:
            raise ValueError('A url is required')
        self._service_ver = None
        self._client = _BaseClient(
            url, timeout=timeout, user_id=user_id, password=password,
            token=token, ignore_authrc=ignore_authrc,
            trust_all_ssl_certificates=trust_all_ssl_certificates,
            auth_svc=auth_svc)

    def index_in_solr(self, params, context=None):
        """
        The index_in_solr function that returns 1 if succeeded otherwise 0
        :param params: instance of type "IndexInSolrParams" (Arguments for
           the index_in_solr function - send doc data to solr for indexing
           string search_core - the name of the solr core to index to
           list<docdata> doc_data - the doc to be indexed, a list of hashes)
           -> structure: parameter "search_core" of String, parameter
           "doc_data" of list of type "docdata" -> mapping from String to
           String
        :returns: instance of Long
        """
        return self._client.call_method(
            'KBSolrUtil.index_in_solr',
            [params], self._service_ver, context)

    def search_solr(self, params, context=None):
        """
        The search_solr function that returns a solrresponse consisting of a string in the format of the specified 'result_format' in SearchSolrParams
        :param params: instance of type "SearchSolrParams" (Arguments for the
           search_solr function - search solr according to the parameters
           passed and return a string string search_core - the name of the
           solr core to be searched searchdata search_param - arbitrary
           user-supplied key-value pairs defining how the search should be
           conducted, a hash, see the example below: search_param={ fl =>
           'object_id,gene_name,genome_source', wt => 'json', rows => 20,
           sort => 'object_id asc', hl => 'false', start => 0, count => 100 }
           searchdata search_query - arbitrary user-supplied key-value pairs
           defining the fields to be searched and their values to be matched,
           a hash which specifies how the documents will be searched, see the
           example below: search_query={ parent_taxon_ref => '1779/116411/1',
           rank => 'species', scientific_lineage => 'cellular organisms;
           Bacteria; Proteobacteria; Alphaproteobacteria; Rhizobiales;
           Bradyrhizobiaceae; Bradyrhizobium', scientific_name =>
           'Bradyrhizobium sp. rp3', domain => 'Bacteria' } OR, simply:
           search_query= { q => "*" }; string result_format - the format of
           the search result, 'xml' as the default, can be 'json', 'csv',
           etc. string group_option - the name of the field to be grouped for
           the result) -> structure: parameter "search_core" of String,
           parameter "search_param" of type "searchdata" (User provided
           parameter data. Arbitrary key-value pairs provided by the user.)
           -> mapping from String to String, parameter "search_query" of type
           "searchdata" (User provided parameter data. Arbitrary key-value
           pairs provided by the user.) -> mapping from String to String,
           parameter "result_format" of String, parameter "group_option" of
           String
        :returns: instance of type "solrresponse" (Solr response data for
           search requests. Arbitrary key-value pairs returned by the solr.)
           -> mapping from String to String
        """
        return self._client.call_method(
            'KBSolrUtil.search_solr',
            [params], self._service_ver, context)

    def status(self, context=None):
        return self._client.call_method('KBSolrUtil.status',
                                        [], self._service_ver, context)
